[{"id":0,"title":"Connecting to the GRCC Raider Web Server","url":"/connecting-to-raider","body":"Connecting to the GRCC Raider Web Server\n\nFor the CIS-148 course, GRCC provides a basic web server, called Raider, to which you will upload your HTML (and related) files as you complete your assignments. \nJust prior to the beginning of this course, an account is created for each enrolled student, using the same login username you will use to log into other campus services \nsuch as Blackboard. Once this account is created, you can access your web directory by visiting\n\nhttps://raider.grcc.edu/~yourusername/\n\n\nreplacing yourusername with your GRCC username.\n\nThe process of uploading your content to Raider relies on a technology called Secure File Transfer Protocol, or SFTP. SFTP uses an encrypted connection to connect \nto the web server, which then allows you to copy files from your computer (referred to as the &quot;local instance&quot;) to another computer (the &quot;remote instance&quot;, usually a server).\n\nMost operating systems include basic commandline utilities that can be used to perform SFTP, but it's generally easier for beginners to use a desktop application. We have included \ninstructions below for setting up two popular SFTP programs — choose one.\n\nUsing FileZilla\n\nFileZilla (https://filezilla-project.org/) is a popular SFTP client and is available for most operating systems. Follow the steps below to connect to your Raider account using FileZilla:\n\n\n  From the menu bar, select File, then Site Manager…\n  Click the New site button, located in the bottom left of the dialog.\n  Enter a meaningful name for this site entry where prompted (the site name should be in edit mode in the My Sites list).\n  On the right side of the dialog, click the Protocol: dropdown and select SFTP - SSH File Transfer Protocol.\n  In the Host: textbox, enter raider.grcc.edu\n  In the Port: textbox, enter the value 22 — this is the port normally used for SFTP connections.\n  Click the Logon Type: dropdown and select Normal.\n  In the User: textbox, enter your GRCC username.\n  In the Password: textbox, enter your GRCC password. Please note: if you have not yet logged into a campus computer, you may need to first reset your password before you will\nbe able to connect to Raider.\n  Click the Connect button at the bottom of the dialog. Done!\n\n\nAssuming everything was entered properly, FileZilla will connect to your Raider account. You'll see the right side of the application (the Remote site panes) reload to display the current contents of your web directory.\n\nUsing Cyberduck\n\nCyberduck (https://cyberduck.io/) is another free SFTP client and is available for most operating systems. Follow the steps below to connect to your Raider account using Cyberduck:\n\n\n  In the main toolbar, click Open Connection. A dialog will open.\n  In the dialog, click the first dropdown and select SFTP (SSH File Transfer Protocol).\n  In the Server: textbox, enter raider.grcc.edu.\n  In the Port: textbox, enter the value 22 — this is the port normally used for SFTP connections.\n  In the Username: textbox, enter your GRCC username.\n  In the Password: textbox, enter your GRCCC password. Please note: if you have not yet logged into a campus computer, you may need to first reset your password before you will\nbe able to connect to Raider.\n  Click the Connect button. Done!\n\n\nAssuming everything was entered properly, Cyberduck will connect to your Raider account. You'll see the application reload to display the current contents of your web directory.\n\nUploading Files\n\nAt this point, you can use FileZilla or Cyberduck to navigate to the web_docs directory. You must upload your files to web_docs — this is what is known as the site root, the public directory from which the web server will respond to requests.\n\nFor each assignment, you'll normally upload a folder; for example, the first assignment is usually saved locally in a folder named Unit1. You'll upload this folder to web_docs. \nYou'll wind up with a directory structure on Raider that looks something like:\n\n- web_docs\n    - Unit1\n        - index.html\n\n\nTo view this file, you'll enter the following in your web browser's navigation bar:\n\nhtttps://raider.grcc.edu/~yourusername/Unit1/index.html\n\n\nThe same process is used for every assignment which you upload:\n\nhtttps://raider.grcc.edu/~yourusername/NameOfUnitFolder/NameOfAssignmentFile.html"},{"id":1,"title":"Development Tools for HTML","url":"/html-essentials-dev-tools","body":"Choosing an editor\n\nCoding an HTML page does not require any special tools. It's entirely possible to write a valid HTML, CSS, or JavaScript document using a bare-bones \ntext editor such as Notepad (on Windows) or TextEdit (on macOS). Doing so makes it much easier to make mistakes, though, since neither of those \neditors provide any kind of syntax highlighting or tools to point out typos. As such, we don't recommend going this route.\n\nFortunately, there are many programs available which are built specifically for writing code, most of which are free or have a free version (usually \nwith a reduced feature set as compared to the paid version). We'll cover two options below which are available for every desktop operating system - \nVisual Studio Code and WebStorm.\n\nVisual Studio Code\n\nVisual Studio Code, also known as VSCode, (not to be confused with the Visual Studio IDE) is a simplified, multi-language code editor from Microsoft, available \nfor free at https://code.visualstudio.com/. No license is needed to download and install VSCode, and it comes with built-in \nsupport for HTML, CSS, and JavaScript. You can continue using VSCode for other courses as well, like CIS-117 (Java) and CIS-127 (C/C++), by installing one or \nmore extensions.\n\nWebStorm\n\nWebStorm is an IDE (integrated development environment) from JetBrains, available for download at https://www.jetbrains.com/webstorm/.\n\nWebStorm is a commercial software application, but JetBrains offers free licenses to student and educators. You can acquire a student license by visiting \nhttps://www.jetbrains.com/community/education/#students and clicking the Apply now button. You'll use your \nstudent email address (yourname@email.grcc.edu) to create an account, and once you've verified your email address you'll have access to WebStorm (and other IDEs) as long as \nyou are a student.\n\nOne major bonus to choosing WebStorm over Visual Studio Code is that WebStorm comes with an embedded web server. This allows you to &quot;run&quot; your web pages in the same manner \nas Raider (or any other web server), which can be helpful to find issues such as using the wrong path format for linked files and images (a very common mistake for new and experienced developers alike).\n\nAdditional Options\n\nSublimeText\n\nSublimeText (https://www.sublimetext.com/) is a code editor very similar in function to Visual Studio Code. Using SublimeText in a commercial environment requires a paid license, but the editor will run indefinitely on an evaluation license, making it a reasonable choice to experiment with during your GRCC coursework.\n\nNotepad++\n\nNotepad++ (https://notepad-plus-plus.org/) is another code editor very similar in function to Visual Studio Code. This editor is only available for the Windows operating system, unless you wish to work through the process of installing Parallels (https://www.parallels.com/products/desktop/) on macOS or learning how to install and configure Wine (https://www.winehq.org/) for Linux/UNIX/BSD or macOS."},{"id":2,"title":"Automated AWS EC2 Installation","url":"/running-automated-ec2-script","body":"Automated AWS EC2 Installation\n\nFor Grand Rapids Community College's Web Applications I &amp; II (CIS 241 &amp; CIS 247) classes.\n\nThis repository will help students in the creation of a web server with PHP support in Amazon Web Services (AWS) using a provided shell script.\n\nCheck Your DNS Records\n\nThe Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. The process of updating the servers so that web browsers can find a site is called propagation. Officially, it can take up to 72 hours for a DNS entry to propagate, but often only takes 30 minutes or a few hours at most.\n\nBefore you begin, check to make sure your DNS records have been set up correctly:\n\n\n  Go to DNSchecker.org\n  In the box under DNS Check, enter your domain name and press Enter or press the search button.\n  You will get a green check mark if your domain has been added to the DNS server. Once you see green check marks, you are ready to continue.\n    \n      If you aren't getting green check marks, double check your instructions on how to setup your DNS records.\n    \n  \n\n\nNote that Certbot will not be able to create an SSL certificate for a site it is unable to find, so be sure your domain name has propagated before running this script.\n\nGetting the Script Onto Your Server\n\nFIRST: Connect to your server console via SSH (Terminal, WinSCP, PuTTY, etc.) or the AWS Connect function.\n\nMETHOD 1: Download the Script (Recommended)\n\nUsing WinSCP\n\nIf you are using WinSCP, you can download install-lamp-secure.sh from this repository and use the WinSCP GUI to upload the file to ec2-user's personal home directory. This will make the script easy to locate when you need to run it in a few moments. Once you've uploaded the script file, click on the Open session in PuTTY button and move on to Running the Script\n\nUsing the Terminal\n\nBy default, when you SSH into your server as ec2-user, you will be at the ec2-user home directory, which will be noted with a tilde (~).\n\nDownload install-lamp-secure.sh from this repository using the following command:\n\nwget https://raw.githubusercontent.com/grcc-cis-openlab/web-applications/refs/heads/main/install-lamp-secure.sh\n\n\nMETHOD 2: Use nano to Create the Script\n\nIf you prefer, you can create the script using the built-in text editor in Linux called Nano. (How to Use Nano (external))\n\n\n  On your Linux terminal screen, verify you are in the ec2-user home directory ('~') by entering:\n     cd ~\n\n  \n  Create a new file using nano called install-lamp-secure.sh:\n     sudo nano install-lamp-secure.sh\n\n  \n  Open this on GitHub in a new tab: install-lamp-secure.sh (right click to open in new tab).\n  Copy the script by clicking the copy button in the upper right corner next to the Raw button or select all of the text in the code box and press Ctrl + C to copy.\n  Back in nano, paste the script into the text editor.\n  Save the file by pressing Ctrl + X, type y, and then press Enter to confirm the save. Hit Enter again to accept the file name.\n\n\nYou're now ready to run the script.\n\nRunning the Script\n\n==READ THIS FIRST==\n\nWatch what the script is doing as it runs. The script will display pertinent information as it goes along. At several points, it will pause and either give you information or ask you for information.\n\nThe script will ask you to check to see if your server is running. AT THAT POINT, IF YOUR SERVER IS NOT RUNNING, DO NOT CONTINUE UNTIL IT IS WORKING. The Domain Name Server (DNS) needs to be able to resolve before Certbot can register your domain for the SSL certificate. See the Check Your DNS Records section at the top of this readme file for details.\n\nYou will also be prompted for the domain name you will be using for the class. Be sure to include the TLD portion because what you enter will be used in Certbot to register the domain for SSL certification. For example: your-domain.xyz not your-domain\n\nActually Run the Script\n\n(If you aren't already, connect to your server using SSH or the AWS Connect function.)\n\nVerify you are in the ec2-user home directory ('~'):\n\ncd ~\n\n\nTo run the script, we will use the bash command:\n\nbash install-lamp-secure.sh\n\n\nIf your script doesn't run, you may need to make it executable:\n\nchmod +x install-lamp-secure.sh"},{"id":3,"title":"Setting Up an AWS EC2 LAMP Server","url":"./setting-up-ec2-tutorial","body":"Setting Up an AWS EC2 LAMP Server\n\nYour course will use Amazon Web Services (AWS) to host a virtual web server as part of your coursework, using the Elastic Cloud Compute (EC2) service. This tutorial will walk you through creating and configuring a basic web server, also referred to as an instance, using Linux, Apache, MariaDB, and PHP (commonly referred to as the LAMP stack).\n\nGet a (free or cheap!) DNS Name For Your Web Apps\n\nIf you plan to be a web developer, now may be a good time to buy a yourname.com domain or a cheap name from Namecheap or similar. If you already have a domain, feel free to use it, or a subdomain (webapps.yourname.com) if you don't want to replace your existing website.\n\nA free (or low cost) domain can be found here (when they feel like giving you one!):\n\n\n  https://education.github.com/pack\n  https://www.getfreedomain.name/\n  http://www.dot.tk/en/index.html?lang=en\n  https://www.namecheap.com/\n\n\nA Quick Note\n\nThe content which follows contains commands which you will enter to install various programs on your PC or on your EC2 instance. Unless otherwise stated, each command will be entered on a single line.\n\nCreate and Configure an EC2 Instance\n\nTo begin, you'll need to sign into the AWS Management Console. You can do this through your AWS Academy dashboard. If you're following this tutorial outside of AWS Academy, you can access the console here: https://console.aws.amazon.com/\n\nLaunch an EC2 Instance\n\nIf you've just signed in, you're probably looking at the EC2 Dashboard. If so, look for and click on the Launch instance button:\n\n\n\nIf you've loaded the Instances overview, look for and click on the Launch instance button in the upper right corner:\n\n\n\nBoth buttons will redirect your browser to the Launch an instance form.\n\nIn the Names and tags section, enter a name for this instance in the Name field. This field is optional, but it will help identify this instance if you decide to create more than one instance.\n\n\n\nUnder Application and OS Images, be sure to choose Amazon Linux 2 AMI (HVM). Selecting a different AMI increases the difficulty of configuring the instance, as some of the options will not match the instructions given in the lecture, your course materials, and this document.\n\n\n\nIf you're creating this instance as part of your AWS Academy training, you should have an existing SSH key, called vockey.ppk, which you can download from your AWS Academy portal. If not, you can create a new SSH key now, following the instructions below.\n\nCreating a Key Pair (Optional)\n\nUnder the Key Pair (login) section, click the Create new key pair button:\n\n\n\nIn the dialog which opens, give your key a name:\n\n\n\nFor this document, we named the file grcc-rsa-keyfile.pem, generating a key for OpenSSH (this can be converted later, if using PuTTY or another utility which requires a .ppk file). Click Create key pair and select an easy-to-find location for your file when prompted. We recommend saving it to the root of the folder where your course files are located.\n\nSet Key File Permissions\n\nTo use your key file in an SSH connection, you'll need to make sure that the file's security permissions are such that only your current user has access.\n\nLinux and macOS\n\nThe process for setting file permissions in the Linux and the macOS operating systems are the same. First, open the terminal application. Then, enter the following command (replacing key-pair-name.pem with the full path to your key file):\n\nchmod 400 key-pair-name.pem\n\n\nThat's it! Continue to Completing Set Up.\n\nWindows\n\n\n  Locate the key file in Windows Explorer.\n  Right-click on the file, then select the Properties option.\n  In the dialog which opens, click the Security tab and click the Advanced button.\n  Click the Disable inheritance button.\n  Remove access to all users except for the current user:\n    \n      Click on a user to remove.\n      Click the Remove button.\n      Repeat until only your current user remains in the list.\n    \n  \n  Click OK to close the Advanced Security Settings window.\n  Click OK to close the Properties window.\n\n\nAll done! Continue to Completing Set Up.\n\nCompleting Set Up\n\nAlmost done! Under Network Settings, ensure that all three Allow … options under Firewall (security groups) are checked:\n\n\n\nThis will allow the wizard to create the correct inbound rules to allow your EC2 instance to receive HTTP and HTTPS requests.\n\nClick the Launch instance button to initiate the creation of your EC2 instance! Once the process completes, find and click on the instance identifier (i-xxxxxxxxxxxxx) in the success message:\n\n\n\nClicking that link will take you to the overview of your new instance:\n\n\n\nNext up: allocating a &quot;permanent&quot; IP address to your instance using Elastic IP.\n\nAllocate an Elastic IP address and associate it with your EC2 instance\n\nOur next step is to assign a permanent IP address to your EC2 instance - this is required to install a SSL/TLS certificate, which we'll need in order to \nenable HTTPS (an encrypted version of a standard web request). While not strictly required, HTTPS is considered best practice, especially when installing tools \nsuch as phpMyAdmin for managing our databases (you'll do this step later in the tutorial).\n\nAllocate an Elastic IP address\n\n\n  On the left side of your browser window, look for the section labeled Network &amp; Security, and then click on the Elastic IPs option:\n\n  In the upper right corner of the next page, click on Allocate Elastic IP address.\n  Leave all settings at their default and click the Allocate button. This will allocate an IP address to your account from the pool of available IP addresses.\n  Once the page has reloaded, check the box for your new IP address, then find and click the Actions button in the upper right corner of your browser.\n  Click Associate Elastic IP address.\n  In the page which loads, leave the Resource type as Instance.\n  For the Instance field, click in the textbox labeled Choose an instance, which will load all of your current EC2 instances (you should have only one instance at this time).\n  Choose your running instance, then click the Associate button.\n  Your instance now has a &quot;permanent&quot; public IP address — we'll use this from now on.\n\n\nPoint Your Domain at Your EC2 Instance\n\nIn your domain manager, create an A record using your public (Elastic IP) address. It's recommended to also create a CNAME record — this allows you to point both http://yourdomain and http://www.yourdomain at your EC2 instance. For this tutorial, we added the following records:\n\n\n  A Record\n    \n      Host: @\n      IP address: (your public Elastic IP address)\n    \n  \n  CNAME record\n    \n      Host: www\n      Target: yourdomain.tld (replace with the domain you've registered)\n    \n  \n\n\nYour settings will vary based on the domain registrar where you acquired the domain.\n\nKeep an Eye on Billing! (IMPORTANT)\n\nYour EC2 instance will normally not accrue any charges, since the AMI chosen belongs to the Free Tier Eligible list.\n\nThe Elastic IP address will accrue charges, so pay attention to the balance left in your AWS Academy account. Once your balance reaches zero, you will not be able to continue the AWS Academy coursework.\n\nConnecting to Your New Server\n\nYou can connect to your server in many ways, but let's look at two of them: WinSCP and the terminal. As the name suggests, WinSCP is only for the Windows operating system, but there are comparable programs available for macOS. How you connect is up to you, based on your personal preferences.\n\nUsing WinSCP\n\nWinSCP is an integrated FTP and SSH client. If you are on a college laptop or an on-campus computer, then WinSCP is already installed. If you need to download it, visit https://winscp.net/eng/downloads.php. Once WinSCP is installed, follow the steps below.\n\nBegin by opening WinSCP - you will presented with a Login window. In the Host name field, enter your domain name. In the User name field, enter ec2-user and leave the password field blank. Then, click the Advanced… drop-down menu.\n\n\n\nIn the Advanced Site Settings window, use the navigation panel on the left and click on Authentication, located under SSH, as shown below. We need to create a .ppk file from the .pem file you saved earlier. Open the Tools drop-down menu and choose Generate New Key Pair with PuTTYgen.\n\n\n\nIn the PuTTY Key Generator, click the Load button. Navigate to where your .pem file is located and open it.\n\n\n\nThe window will change to look like the image below. If you wish to secure your server further, enter a secure password in the Key passphrase field and again in the Confirm passphrase field. You will be prompted for this password each time you login. You may leave the field blank if you wish, but it will be less secure, and a warning will appear when you save the private key. To save the private key, click the Save private key button. Like your .pem file, save it somewhere secure where you can find it again. On a campus computer, you should save your key file to your J:\\\\ drive in order to access it later.\n\n\n\nBack in the Advanced Site Settings window, the Private key file field should be populated with your .ppk file. If it isn't, use the three dots menu (…) to choose your .ppk file. It should look like the image below. Click OK to continue.\n\n\n\nDouble check your settings below and click Save.\n\n\n\nIn the Save session as site dialog window, you can enter a descriptive name in the Site name field, or leave it as default. Then, click OK to finish saving your settings.\n\n\n\nNow, whenever you open WinSCP, your Login window should look like this.\n\n\n\nChoose Login to log onto your server. The first time you connect to your server, you may be prompted to confirm some settings. Also, if you entered a password for your key file, you will be prompted to enter that password before continuing. Once you clear any prompts, you are connected.\n\nYou will now see the main window as shown below. The left panel is your local computer, and the right panel is your server (your EC2 instance). Each of these panels will show a list of folders (also referred to as &quot;directories&quot;) and files - each of these lists is collectively known as a file tree. The current location (the &quot;active&quot; or &quot;current&quot; directory) within each file system is shown in the blue bar above each file tree. If you previously completed CIS-148 HTML Essentials, this should look very similar to FileZilla.\n\nTo connect to your server via SSH, you will need to click on the Open session in PuTTY button.\n\n\n\nAgain, the first time you do so, you may need to confirm some things in a series of dialog boxes. If you entered a password for your key file, you will need to enter it in order to continue. If you see the terminal as shown below, you are connected and may skip to the Set Up LAMP and phpMyAdmin section.\n\n\n\nUsing Windows Terminal\n\nIf you're using Windows 11, then you already have everything you need to connect to your EC2 instance — click the Start button, and then type Terminal. Open the Terminal application, and then you're ready to skip ahead to Connect Using SSH.\n\nIf you're using Windows 10 or older, then you have a few options:\n\n\n  Command line utility (cmd.exe)\n  PowerShell\n  Terminal\n\n\nThe command line utility and PowerShell are already installed on your computer. Terminal is an optional software application which you can install from the Microsoft Store — follow this link learn how to install the Terminal application:\n\nhttps://learn.microsoft.com/en-us/windows/terminal/install\n\nOnce your terminal is running, you'll need to verify if the ssh command is available. In the terminal, type:\n\nssh\n\n\nIf you see a &quot;usage&quot; list, then you can proceed to Set Up LAMP and phpMyAdmin. If you see an error message, you'll need to install OpenSSH. To install OpenSSH, type (or copy and paste) the following command into the PowerShell terminal1:\n\nAdd-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0\n\n\nYou'll see a brief &quot;status bar&quot; message as the tool installs. Once the tool has finished installing you are ready to connect to your EC2 instance!\n\nUsing OSX/macOS Terminal\n\nTo connect to your EC2 instance from an Apple computer, you'll use the Terminal application, found in your Applications list. An SSH client should already be installed — you can verify this by launching Terminal and then typing in the following command:\n\nssh\n\n\nYou should see a help list of arguments for the ssh command.\n\nUsing Linux Terminal\n\nTo connect to your EC2 instance from a Linux computer, you'll use the terminal (or shell) application, typically found in your Administration software list — the location will vary depending on your Linux distribution and the desktop manager which was installed during setup (consult the documentation for your Linux distribution for more details). An SSH client should already be installed — you can verify this by launching the terminal (press the Ctrl+Alt+T keys to open the terminal) and then typing in the following command:\n\nssh\n\n\nYou should see a help list of arguments for the ssh command.\n\nConnect using SSH\n\nRegardless of the operating system from which you're connecting, the commands which follow will be the same.\n\nLaunch your terminal application, and then type the following command, replacing key-pair-name.pem with the path to the PEM file you created above and replacing elastic-IP-address with your site's public IP address (or domain name):\n\nssh -i key-pair-name.pem ec2-user@elastic-IP-address\n\n\nYou're now connected! When you're ready, continue to the next step, Set Up LAMP and phpMyAdmin.\n\nSet Up LAMP and phpMyAdmin\n\nFor this next step, we'll be following the process outlined by the article Tutorial: Install a LAMP server on AL2,  located at\n\nhttps://docs.aws.amazon.com/linux/al2/ug/ec2-lamp-amazon-linux-2.html\n\nWe're including the relevant commands here, but for brevity, we're omitting the majority of the tutorial's content. Please take the time to read the source article.\n\nConnect\n\nIf not already connected, connect to your EC2 instance (substituting your values):\n\nssh -i key-pair-name.pem ec2-user@elastic-IP-address\n\n\nInstall Web Server Software\n\nRun the following commands (each line is a separate command — run them one at a time). When prompted, enter y to allow the installation of each module.\n\nsudo yum update -y\n\n\nsudo amazon-linux-extras install mariadb10.5\n\n\nsudo amazon-linux-extras install php8.2\n\n\nsudo yum install -y httpd\n\n\nAt this point, you've installed MariaDB (a relational database management system, or RDBMS), PHP (for creating dynamic websites — you'll use this in CIS-247), and Apache — the web server software that allows your EC2 instance to respond to requests from your browser. Good job!\n\nStart &amp; Configure Apache\n\nWe've installed the software we need in order for your EC2 instance to act as a web server, but we need to start the software and make sure it starts automatically anytime the instance is started or rebooted.\n\nRun the following commands (each line is a separate command — run them one at a time):\n\nsudo systemctl start httpd\n\n\nsudo systemctl enable httpd\n\n\nsudo systemctl is-enabled httpd\n\n\nThe last command should print &quot;enabled&quot; — your Apache module is now running! Open your browser and type your domain into the navigation bar, then hit Enter. Your domain should load the Apache test page:\n\n\n\nCongratulations! You now have a working web server! We're not quite done yet — we need to update permissions on some files, and make sure that files which you will upload later have the correct permissions automatically.\n\nSet File Permissions\n\nRun the following commands (each line is a separate command — run them one at a time):\n\nsudo usermod -a -G apache ec2-user\n\n\nexit\n\n\nThe first command adds your user (ec2-user) to the apache group. The second command, exit, will end your SSH session — reconnect, and then continue with:\n\nsudo chown -R ec2-user:apache /var/www\n\n\nfind /var/www -type f -exec sudo chmod 0664 {} \\;\n\n\nThe first command changes the owner (a user which has full control) of every file and directory in the /var/www directory to your current user (ec2-user). This ensures that you can add, update, and remove files as necessary. The second command changes the effective permissions of every file under /var/www to 0664; basically, the web server can execute any files in that directory, but remote users (people who browse to your website) cannot execute files — they can only read files (that is, view your files in their web browser).\n\nAt this point, you've done the minimum to allow your web server to serve your web pages as you upload them. The next step is to configure your web server to use HTTPS (a secure version of HTTP), taking advantage of the free certificate service Let's Encrypt.\n\nEncrypt the Connection with Let's Encrypt\n\nLet's Encrypt is a service which provides free SSL/TLS certificates, making it relatively easy to enable HTTPS on your web server. If you'd like to learn more, visit https://letsencrypt.org/about/.\n\nAs in previous steps, we'll skip most of the explanation around the commands you'll need to execute.\n\nAdd Certbot\n\nRun the following commands (each line is a separate command — run them one at a time):\n\nsudo amazon-linux-extras install epel\n\n\nsudo yum install certbot-apache\n\n\nWhen prompted, enter y to allow the installation of each module. Before we can run Certbot, we need to set up our virtual host configuration.\n\nSetup Virtual Host\n\nRun the following commands, substituting the domain which you registered for your_domain (each line is a separate command — run them one at a time):\n\nsudo mkdir -p /var/www/your_domain/html\n\n\nsudo mkdir -p /var/www/your_domain/log\n\n\nThis will create the directories to which you'll upload your homework files, later. To verify that our virtual host is working, we'll create a simple test page, using nano2:\n\nsudo nano /var/www/your_domain/html/index.html\n\n\nCopy and paste the following markup:\n\n&lt;html&gt;  \n  &lt;head&gt;  \n\t  &lt;title&gt;Welcome to your website!&lt;/title&gt;  \n  &lt;/head&gt;  \n  &lt;body&gt; \n\t  &lt;h1&gt;Success! The your_domain virtual host is working!&lt;/h1&gt; \n  &lt;/body&gt;  \n&lt;/html&gt;\n\n\nAgain, replace your_domain with your domain name. Save and exit3.\n\nNext, we'll create directories for storing our virtual host configuration files. Enter the following command:\n\nsudo mkdir /etc/httpd/sites-available\n\n\nThis creates a directory for storing virtual hosts we could use. Next, enter the following command:\n\nsudo mkdir /etc/httpd/sites-enabled\n\n\nThis directory stores the configuration file for enabled virtual hosts; that is, the active virtual hosts.\n\nNext, we need to update the Apache configuration file to tell it to look for our virtual host configurations. We'll use nano to update the file:\n\nsudo nano /etc/httpd/conf/httpd.conf\n\n\nScroll to the end of the file (using your ↑ UP and ↓ DOWN arrow keys) and add the following line:\n\nIncludeOptional sites-enabled/*.conf\n\n\nSave and exit. From now on, any configuration files found in the sites-enabled directory will be loaded when Apache starts. Let's add a configuration file for our domain (remember to replace your_domain with your domain name):\n\nsudo nano /etc/httpd/sites-available/your_domain.conf\n\n\nCopy and paste the following code:\n\n&lt;VirtualHost *:80&gt;  \n    ServerName www.your_domain  \n    ServerAlias your_domain  \n    DocumentRoot /var/www/your_domain/html  \n    ErrorLog /var/www/your_domain/log/error.log  \n    CustomLog /var/www/your_domain/log/requests.log combined  \n&lt;/VirtualHost&gt;\n\n\nAs usual, replace your_domain with your domain name. Save and exit.\n\nTo complete the virtual host setup, run the following command (replacing your_domain with your domain name):\n\nsudo ln -s /etc/httpd/sites-available/your_domain.conf /etc/httpd/sites-enabled/your_domain.conf\n\n\nThis creates a symlink, or symbolic link, for your configuration file. To put simply, your file isn't actually copied to sites-enabled, but it appears to have been copied. This allows Apache to load your virtual configuration without needing to have duplicate versions of the same configuration values.\n\nOne last step — restart Apache using the following command:\n\nsudo systemctl restart httpd\n\n\nReload your website in your browser, and you should now see the basic HTML page we created above.\n\nComplete Certbot Setup\n\nNow that you have a functioning virtual host, we can run Certbot. It's actually pretty simple.\n\nFirst, make sure that your domain works — load your website in your browser. If you can visit http://your_domain (replacing your_domain with your registered domain name), then you can proceed. If not, wait about 15 minutes and then try again. Once you can successfully load your domain, continue with the steps below.\n\nRun the following command, replacing your_domain with your domain name:\n\nsudo certbot --apache -d your_domain\n\n\nYou'll need to enter a valid email address in the first prompt (use either your GRCC student email address or a personal email address — it's up to you). You must accept the second prompt (Terms of Service) to continue. The third prompt is optional — accept if you'd like your email address added to the Electronic Frontier Foundation's mailing list.\n\nWait a moment or two, and assuming you followed the instructions above correctly, Certbot will complete successfully. Congrats! Reload your website to see that you now have a working HTTPS connection!\n\nSecure the Database Server and Install phpMyAdmin\n\nWith the hard part out of the way, we can complete a few housekeeping tasks. We need to change some of the default MariaDB settings (to prevent unauthorized users from accessing our databases) and we'll install phpMyAdmin to give us a graphical user interface (GUI) for managing MariaDB.\n\nSecure the Database\n\nRun the following commands (each line is a separate command — run them one at a time):\n\nsudo systemctl start mariadb\n\n\nsudo mysql_secure_installation\n\n\nThe second command initiates a wizard which walks you through setting up the root DB user. When prompted:\n\n\n  Press Enter\n  Enter n\n  Enter y to change the root password. Create a memorable password, or use a service such as Norton Password Generator (https://identitysafe.norton.com/password-generator/)\n  Enter y to remove anonymous user accounts\n  Enter y to disable remote root login\n  Enter y to remove the test database\n  Enter y to reload and apply your changes.\n\n\nThat's it! MariaDB is now secure. We won't be using it right away, so run the following command to shut it down:\n\nsudo systemctl stop mariadb\n\n\nYou can skip the preceding command if you'd like to experiment with MariaDB later. If you want Maria to always start when the EC2 instance starts, run the following command:\n\nsudo systemctl enable mariadb\n\n\nInstall phpMyAdmin\n\nWith MariaDB installed and configured, our last task is to install phpMyAdmin. Run the following commands, replacing your_domain with your domain name:\n\nsudo yum install php-mbstring php-xml -y\n\n\nsudo systemctl restart httpd\n\n\nsudo systemctl restart php-fpm\n\n\ncd /var/www/your_domain/html\n\n\nwget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz\n\n\nmkdir phpMyAdmin &amp;&amp; tar -xvzf phpMyAdmin-latest-all-languages.tar.gz -C phpMyAdmin --strip-components 1\n\n\nrm phpMyAdmin-latest-all-languages.tar.gz\n\n\nIf you previously shutdown MariaDB, start it now:\n\nsudo systemctl start mariadb\n\n\nIn your web browser, open the phpMyAdmin UI by visiting:\n\nhttps://your_domain/phpMyAdmin\n\n\nReplace your_domain with your domain name. You should now see the phpMyAdmin login screen:\n\n\nLogin using &quot;root&quot; as the username and using the MariaDB password which you created above. You should now be logged in! Great job!\n\nThat's it! There are a few additional steps left to configure phpMyAdmin, which you'll do in CIS-247. For now, you're ready to upload your static files!\n\nUpload Code!\n\nNow that your EC2 instance is properly configured as a web server, it's time to upload some files! There are many options — we've outlined a few popular tools below.\n\nUsing WinSCP\n\nIf you used WinSCP to configure your EC2 instance, then you already have an SFTP client. Otherwise, see Using WinSCP above.\n\nUsing FileZilla\n\nFileZilla (https://filezilla-project.org/) is a popular SFTP client and is available for most operating systems. Follow the steps below to connect to your EC2 instance using FileZilla:\n\n\n  From the menu bar, select File, then Site Manager…\n  Click the New site button, located in the bottom left of the dialog.\n  Enter a meaningful name for this site entry where prompted (the site name should be in edit mode in the My Sites list).\n  On the right side of the dialog, click the Protocol: dropdown and select SFTP - SSH File Transfer Protocol.\n  In the Host: textbox, enter your domain or the public IP address for your instance — either is acceptable.\n  In the Port: textbox, enter the value 22 — this is the port normally used for SFTP connections.\n  Click the Logon Type: dropdown and select Key file.\n  In the User: textbox, enter ec2-user (the same user with which you connected to the instance before).\n  Click the Browse… button to the right of the Key file: textbox. Navigate to and select the .pem file which you previously used to connect to your EC2 instance.\n  Click the Connect button at the bottom of the dialog. Done!\n\n\nAssuming everything was entered properly, FileZilla will connect to your EC2 instance. You'll see the right side of the application (the Remote site panes) reload to display the current contents of your instance. At this point, you can use FileZilla to navigate to the site root which you previously set up in the VirtualHost config — all of your HTML/CSS/JavaScript files will be uploaded to the site root, as directed in each assignment.\n\nUsing Cyberduck\n\nCyberduck (https://cyberduck.io/) is another free SFTP client and is available for most operating systems. Follow the steps below to connect to your EC2 instance using Cyberduck:\n\n\n  In the main toolbar, click Open Connection. A dialog will open.\n  In the dialog, click the first dropdown and select SFTP (SSH File Transfer Protocol).\n  In the Server: textbox, enter your domain or the public IP address for your instance — either is acceptable.\n  In the Port: textbox, enter the value 22 — this is the port normally used for SFTP connections.\n  In the Username: textbox, enter ec2-user (the same user with which you connected to the instance before).\n  Leave the Password: textbox blank.\n  Click the dropdown next to SSH Private Key:. Navigate to and select the .pem file which you previously used to connect to your EC2 instance.\n  Click the Connect button. Done!\n\n\nAssuming everything was entered properly, Cyberduck will connect to your EC2 instance. You'll see the application reload to display the current contents of your instance. At this point, you can use Cyberduck to navigate to the site root which you previously set up in the VirtualHost config — all of your HTML/CSS/JavaScript files will be uploaded to the site root, as directed in each assignment.\n\nTake a Snapshot! (Optional)\n\nNow that your instance is up and running and properly configured, it's a good idea to save a backup of the current state of the server. For more information, visit\n\nhttps://docs.aws.amazon.com/ebs/latest/userguide/ebs-snapshots.html\n\n\n\nFootnotes:\n\n\n  \n    \n      You may also visit the following link for a more detailed walk-through: https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse ↩\n    \n    \n      Visit https://linuxize.com/post/how-to-use-nano-text-editor/ for a simple explanation of the nano editor and to learn the basic commands ↩\n    \n    \n      Exit nano using CTRL+X, type y and press ENTER to confirm the save, and then press ENTER to accept the file name ↩"}]
